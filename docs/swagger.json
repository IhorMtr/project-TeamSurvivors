{
  "openapi": "3.1.0",
  "info": {
    "version": "1.0.0",
    "title": "Lehlehka App",
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "description": "Lehlehka App"
  },
  "servers": [
    {
      "url": "http://localhost:3000"
    },
    {
      "url": "https://project-teamsurvivors.onrender.com"
    }
  ],
  "tags": [
    {
      "name": "Weeks",
      "description": "Getting baby and mom info by date"
    },
    {
      "name": "Diaries",
      "description": "Operations related to diary entries, including create, read, update, and delet"
    }
  ],
  "paths": {
    "/api/weeks/my-day/{estimateBirthDate}": {
      "get": {
        "tags": [
          "Weeks"
        ],
        "summary": "Get my day by estimate birth date",
        "operationId": "getMyDay",
        "description": "Get my day by estimate birth date",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "estimateBirthDate",
            "required": true,
            "schema": {
              "type": "string",
              "example": "2026-01-15"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get my day by estimate birth date",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully found my day info!"
                    },
                    "data": {
                      "$ref": "#/components/schemas/my-day"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "description": "Not found error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "NotFoundError"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "message"
                      ],
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": [
                            "Info not found, enter valid estimate date"
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "example": "InternalServerError"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "message"
                      ],
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": "Something went wrong"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/weeks/my-day-demo": {
      "get": {
        "tags": [
          "Weeks"
        ],
        "summary": "Get my day demo",
        "operationId": "getMyDayDemo",
        "description": "Get my day demo",
        "security": [],
        "responses": {
          "200": {
            "description": "Get my day demo",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully found my day info!"
                    },
                    "data": {
                      "$ref": "#/components/schemas/my-day"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid query/state)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "BadRequest"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "message"
                      ],
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": "Invalid demo parameters"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "example": "InternalServerError"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "message"
                      ],
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": "Something went wrong"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/weeks/baby-state/{currentWeek}": {
      "get": {
        "tags": [
          "Weeks"
        ],
        "summary": "Get baby state by week",
        "operationId": "getBabyState",
        "description": "Get baby state by week",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "currentWeek",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 5
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get baby state",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully found baby state!"
                    },
                    "data": {
                      "$ref": "#/components/schemas/baby-state"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "description": "Not found error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "NotFoundError"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "message"
                      ],
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": [
                            "Info not found, please set a valid current pregnancy week"
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "example": "InternalServerError"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "message"
                      ],
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": "Something went wrong"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/weeks/mom-state/{currentWeek}": {
      "get": {
        "tags": [
          "Weeks"
        ],
        "summary": "Get mom state by week",
        "operationId": "getMomState",
        "description": "Get mom state by week",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "currentWeek",
            "required": true,
            "schema": {
              "type": "integer",
              "example": 5
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get mom state",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully found mom state!"
                    },
                    "data": {
                      "$ref": "#/components/schemas/mom-state"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "description": "Not found error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "NotFoundError"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "message"
                      ],
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": [
                            "Info not found, please set a valid current pregnancy week"
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 500
                    },
                    "message": {
                      "type": "string",
                      "example": "InternalServerError"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "message"
                      ],
                      "properties": {
                        "message": {
                          "type": "string",
                          "example": "Something went wrong"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/diaries": {
      "get": {
        "tags": [
          "Diaries"
        ],
        "summary": "Get all diary entries of the authenticated user",
        "operationId": "getEntries",
        "description": "Returns a list of all diary entries that belong to the currently authenticated user.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successfully found entries",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully found entries!"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/diary"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      },
      "post": {
        "tags": [
          "Diaries"
        ],
        "summary": "Create diary entries of the authenticated user",
        "operationId": "createEntries",
        "description": "Create an entry with payload matching Joi validation schema",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "title",
                  "description",
                  "date",
                  "emotions"
                ],
                "properties": {
                  "title": {
                    "type": "string",
                    "description": "The title of the diary entry",
                    "minLength": 1,
                    "maxLength": 64,
                    "example": "My first diary entry"
                  },
                  "description": {
                    "type": "string",
                    "description": "The detailed content of the diary",
                    "minLength": 1,
                    "maxLength": 1000,
                    "example": "Today I felt very happy because..."
                  },
                  "date": {
                    "type": "string",
                    "format": "date",
                    "description": "The date of the diary entry in 'YYYY-MM-DD' format",
                    "example": "2025-09-18"
                  },
                  "emotions": {
                    "type": "array",
                    "description": "Array of emotion IDs related to this diary entry",
                    "items": {
                      "type": "string",
                      "format": "objectId",
                      "example": "64fa3b2f8f8c2d0012345678"
                    },
                    "minItems": 1,
                    "maxItems": 12
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Diary entry successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 201
                    },
                    "message": {
                      "type": "string",
                      "example": "Diary entry successfully created!"
                    },
                    "data": {
                      "$ref": "#/components/schemas/diary"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Validation failed or entrytId is not a valid MongoDB ObjectId."
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/{entryId}": {
      "get": {
        "tags": [
          "Diaries"
        ],
        "summary": "Get a diary entry by ID",
        "operationId": "getDiaryById",
        "description": "Returns a single diary entry by its ID. The entry must belong to the currently authenticated user.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "entryId",
            "required": true,
            "description": "The MongoDB ObjectId of the diary entry",
            "schema": {
              "type": "string",
              "format": "objectId",
              "example": "64fa3b2f8f8c2d0012345678"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully found entry",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully found entry with id 64fa3b2f8f8c2d0012345678!"
                    },
                    "data": {
                      "$ref": "#/components/schemas/diary"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - entryId is not a valid MongoDB ObjectId",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "EntryId must be a valid MongoDB ObjectId"
                    },
                    "data": {
                      "type": "object",
                      "properties": {}
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entry not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Entry not found"
                    },
                    "data": {
                      "type": "object",
                      "properties": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Diaries"
        ],
        "summary": "Update a diary entry by ID",
        "operationId": "updateDiaryEntry",
        "description": "Update an existing diary entry. Only the owner of the entry can update it. Payload must match validation rules.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "entryId",
            "required": true,
            "description": "The MongoDB ObjectId of the diary entry",
            "schema": {
              "type": "string",
              "format": "objectId",
              "example": "64fa3b2f8f8c2d0012345678"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string",
                    "description": "The title of the diary entry",
                    "minLength": 1,
                    "maxLength": 64,
                    "example": "Updated diary title"
                  },
                  "description": {
                    "type": "string",
                    "description": "The detailed content of the diary",
                    "minLength": 1,
                    "maxLength": 1000,
                    "example": "Updated content of the diary entry."
                  },
                  "date": {
                    "type": "string",
                    "format": "date",
                    "description": "The date of the diary entry in 'YYYY-MM-DD' format",
                    "example": "2025-09-18"
                  },
                  "emotions": {
                    "type": "array",
                    "description": "Array of emotion IDs related to this diary entry",
                    "items": {
                      "type": "string",
                      "format": "objectId",
                      "example": "64fa3b2f8f8c2d0012345678"
                    },
                    "minItems": 1,
                    "maxItems": 12
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully updated entry",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully updated entry!"
                    },
                    "data": {
                      "$ref": "#/components/schemas/diary"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - validation failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "Validation error"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "errors": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "example": "Title must be at least 1 character long"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "description": "Entry not found or no permission to update",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Entry not found or no permission to update"
                    },
                    "data": {
                      "type": "object",
                      "properties": {}
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Diaries"
        ],
        "summary": "Delete a diary entry by ID",
        "operationId": "deleteDiaryEntry",
        "description": "Delete a diary entry by its ID. Only the owner of the entry can delete it.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "entryId",
            "required": true,
            "description": "The MongoDB ObjectId of the diary entry to delete",
            "schema": {
              "type": "string",
              "format": "objectId",
              "example": "64fa3b2f8f8c2d0012345678"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted entry (No Content)"
          },
          "400": {
            "description": "Bad Request - entryId is not a valid MongoDB ObjectId",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "EntryId must be a valid MongoDB ObjectId"
                    },
                    "data": {
                      "type": "object",
                      "properties": {}
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "description": "Entry not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Entry not found"
                    },
                    "data": {
                      "type": "object",
                      "properties": {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    },
    "schemas": {
      "my-day": {
        "type": "object",
        "required": [
          "_id",
          "daysLeftToBirth",
          "weekNumber",
          "babySize",
          "babyWeight",
          "image",
          "babyActivity",
          "babyDevelopment",
          "momDailyTips"
        ],
        "properties": {
          "_id": {
            "description": "Contact's id",
            "type": "string",
            "example": "65e4decdd286b30065d54af9"
          },
          "daysLeftToBirth": {
            "description": "Days left to birth date",
            "type": "integer",
            "example": 94
          },
          "weekNumber": {
            "description": "Week number",
            "type": "integer",
            "example": 29
          },
          "babySize": {
            "description": "Baby size",
            "type": "number",
            "example": 38.6
          },
          "babyWeight": {
            "description": "Baby weight",
            "type": "number",
            "example": 1150
          },
          "image": {
            "description": "Image of baby analogy",
            "type": "string",
            "example": "https://ftp.goit.study/img/lehlehka/6895ce04a5c677999ed2af41"
          },
          "babyActivity": {
            "description": "Describe baby's activity",
            "type": "string",
            "example": "Місця в матці стає менше, тому рухи дитини стають менш розмашистими, але більш сильними. Ви можете відчути п'яту або лікоть, що випирає."
          },
          "babyDevelopment": {
            "description": "Describe baby developement",
            "type": "string",
            "example": "Кістковий мозок повністю взяв на себе функцію кровотворення. Голова дитини росте, щоб вмістити мозок, що стрімко розвивається. М'язи та легені продовжують дозрівати. Наднирники виробляють гормони, які стимулюють вироблення молока у матері."
          },
          "momDailyTips": {
            "description": "Mother daily tips",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "Слідкуйте за рухами дитини. Якщо ви помітили, що їхня кількість або інтенсивність значно зменшилася, зверніться до лікаря.",
              "Може з'явитися свербіж шкіри на животі через її розтягнення. Використовуйте зволожуючі креми та олійки.",
              "Запори можуть стати проблемою. Їжте більше клітковини (овочі, фрукти, цільні злаки) і пийте достатньо води.",
              "Почніть думати про ім'я для дитини, якщо ви ще не визначилися. Складіть список варіантів.",
              "Якщо у вас є старші діти, почніть готувати їх до появи братика чи сестрички.",
              "Практикуйте дихальні вправи. Глибоке дихання насичує кров киснем і заспокоює.",
              "Не соромтеся просити про допомогу, якщо вам важко впоратися з домашніми справами."
            ]
          }
        }
      },
      "baby-state": {
        "type": "object",
        "required": [
          "_id",
          "weekNumber",
          "analogy",
          "image",
          "babyDevelopment",
          "interestingFact"
        ],
        "properties": {
          "_id": {
            "description": "Document id",
            "type": "string",
            "example": "65e4decdd286b30065d54af9"
          },
          "weekNumber": {
            "description": "Week number",
            "type": "integer",
            "example": 29
          },
          "analogy": {
            "description": "Analogy of baby at current week",
            "type": "string",
            "example": "Яблуко"
          },
          "image": {
            "description": "Image of baby analogy",
            "type": "string",
            "example": "https://ftp.goit.study/img/lehlehka/6895ce04a5c677999ed2af41"
          },
          "babyDevelopment": {
            "description": "Describe baby developement",
            "type": "string",
            "example": "Кістковий мозок повністю взяв на себе функцію кровотворення. Голова дитини росте, щоб вмістити мозок, що стрімко розвивається. М'язи та легені продовжують дозрівати. Наднирники виробляють гормони, які стимулюють вироблення молока у матері."
          },
          "interestingFact": {
            "description": "Interesting fact about baby",
            "type": "string",
            "example": "Дитина вже чує звуки: ваше серцебиття, бурчання в животі, ваш голос. Розмовляйте з нею!"
          }
        }
      },
      "mom-state": {
        "type": "object",
        "required": [
          "_id",
          "weekNumber",
          "feelings",
          "comfortTips"
        ],
        "properties": {
          "_id": {
            "description": "Document id",
            "type": "string",
            "example": "6895cb58a5c677999ed2aefe"
          },
          "weekNumber": {
            "description": "Week number",
            "type": "integer",
            "example": 6
          },
          "feelings": {
            "description": "Mother's feelings and sensations",
            "type": "object",
            "required": [
              "states",
              "sensationDescr"
            ],
            "properties": {
              "_id": {
                "description": "Feelings subdocument id",
                "type": "string",
                "example": "68ca89a0048001853eeaba31"
              },
              "states": {
                "description": "Array of feelings/symptoms at current week",
                "type": "array",
                "items": {
                  "type": "string"
                },
                "example": [
                  "Сильна втома",
                  "Загострення нюху",
                  "Харчові дивацтва"
                ]
              },
              "sensationDescr": {
                "description": "Description of sensations",
                "type": "string",
                "example": "Втома може бути всеохоплюючою. Аромат кави, який ви обожнювали, тепер може викликати огиду..."
              }
            }
          },
          "comfortTips": {
            "description": "List of comfort tips",
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "category",
                "tip"
              ],
              "properties": {
                "_id": {
                  "description": "Comfort tip id",
                  "type": "string",
                  "example": "68ca89a0048001853eeaba32"
                },
                "category": {
                  "description": "Category of tip",
                  "type": "string",
                  "example": "Харчування"
                },
                "tip": {
                  "description": "Practical advice for comfort",
                  "type": "string",
                  "example": "Прислухайтеся до свого організму. Якщо вам хочеться чогось конкретного (і це безпечно), дозвольте собі це."
                }
              }
            }
          }
        }
      },
      "diary": {
        "type": "object",
        "required": [
          "title",
          "description",
          "date",
          "emotions"
        ],
        "properties": {
          "title": {
            "type": "string",
            "description": "The title of the diary entry",
            "minLength": 1,
            "maxLength": 64,
            "example": "My first diary entry"
          },
          "description": {
            "type": "string",
            "description": "The detailed content of the diary",
            "minLength": 1,
            "maxLength": 1000,
            "example": "Today I felt very happy because..."
          },
          "date": {
            "type": "string",
            "format": "date",
            "description": "The date of the diary entry in 'YYYY-MM-DD' format",
            "example": "2025-09-18"
          },
          "emotions": {
            "type": "array",
            "description": "Array of emotion IDs related to this diary entry",
            "items": {
              "type": "string",
              "format": "objectId",
              "example": "64fa3b2f8f8c2d0012345678"
            },
            "minItems": 1,
            "maxItems": 12
          },
          "userId": {
            "description": "ID of the user who created the entry (usually from JWT)",
            "type": "string",
            "readOnly": true,
            "example": "65e4decdd286b30065d54af9"
          }
        }
      }
    },
    "responses": {
      "401": {
        "description": "Unauthorized error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 401
                },
                "message": {
                  "type": "string",
                  "example": "UnauthorizedError"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Access token expired"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}