{
  "openapi": "3.1.0",
  "info": {
    "version": "1.0.0",
    "title": "Lehlehka App",
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "description": "Lehlehka App"
  },
  "servers": [
    {
      "url": "http://localhost:3000"
    },
    {
      "url": "https://project-teamsurvivors.onrender.com"
    }
  ],
  "tags": [
    {
      "name": "Weeks",
      "description": "Getting baby and mom info by date"
    },
    {
      "name": "Diaries",
      "description": "Operations related to diary entries, including create, read, update, and delete"
    },
    {
    "name": "Tasks",
    "description": "Operations related to tasks including create, read, and update"
    }
  ],
  "paths": {
    "/api/auth/register": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Register new user",
        "operationId": "registerUser",
        "description": "Create a new user account.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name",
                  "email",
                  "password"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "maxLength": 32,
                    "example": "John Doe"
                  },
                  "email": {
                    "type": "string",
                    "format": "email",
                    "maxLength": 64,
                    "example": "johndoe@example.com"
                  },
                  "password": {
                    "type": "string",
                    "minLength": 8,
                    "maxLength": 128,
                    "example": "MySecret123"
                  },
                  "gender": {
                    "type": "string",
                    "enum": [
                      "boy",
                      "girl",
                      null
                    ],
                    "nullable": true,
                    "example": "boy"
                  },
                  "dueDate": {
                    "type": "string",
                    "format": "date",
                    "nullable": true,
                    "example": "2025-12-31"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 201
                    },
                    "message": {
                      "type": "string",
                      "example": "User has been created successfully!"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "_id": {
                          "type": "string",
                          "example": "64fa8b7f2f1a2c0012345678"
                        },
                        "name": {
                          "type": "string",
                          "example": "John Doe"
                        },
                        "email": null
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/login": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Login user",
        "operationId": "loginUser",
        "description": "Login user with email and password to get JWT token.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "password"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "example": "johndoe@example.com"
                  },
                  "password": {
                    "type": "string",
                    "example": "MySecret123"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "token",
                    "refreshToken"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Login successful"
                    },
                    "token": {
                      "type": "string",
                      "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                    },
                    "refreshToken": {
                      "type": "string",
                      "example": "dGhpcy1pcy1hLXJlZnJlc2gtdG9rZW4..."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/logout": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Logout user",
        "operationId": "logoutUser",
        "description": "Invalidate the current session (requires Authorization header).",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Logout successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully logged out!"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/refresh": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Refresh access token",
        "operationId": "refreshUserSession",
        "description": "Refresh access token using refresh token (requires Authorization header).",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Session refreshed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully refreshed a session!"
                    },
                    "token": {
                      "type": "string",
                      "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/tasks": {
  "get": {
    "tags": ["Tasks"],
    "summary": "Get all tasks of the authenticated user",
    "operationId": "getTasks",
    "description": "Returns a list of all tasks that belong to the currently authenticated user.",
    "security": [{"bearerAuth": []}],
    "responses": {
      "200": {
        "description": "Successfully fetched tasks",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": ["status","message","data"],
              "properties": {
                "status": {"type": "integer", "example": 200},
                "message": {"type": "string", "example": "Successfully fetched tasks!"},
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/task"
                  }
                }
              }
            }
          }
        }
      },
      "401": {"description": "Unauthorized"}
    }
  },
  "post": {
    "tags": ["Tasks"],
    "summary": "Create a new task for the authenticated user",
    "operationId": "createTask",
    "description": "Create a task. The payload must follow validation rules.",
    "security": [{"bearerAuth": []}],
    "requestBody": {
      "required": true,
      "content": {
        "application/json": {
          "schema": {
            "type": "object",
            "required": ["title","description"],
            "properties": {
              "title": {"type": "string","minLength":1,"maxLength":64,"example":"Finish API documentation"},
              "description": {"type": "string","minLength":1,"maxLength":1000,"example":"Write Swagger docs for tasks API"},
              "dueDate": {"type": "string","format":"date","example":"2025-09-25"},
              "isDone": {"type": "boolean","example": false}
            }
          }
        }
      }
    },
    "responses": {
      "201": {
        "description": "Task successfully created",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required":["status","message","data"],
              "properties":{
                "status":{"type":"integer","example":201},
                "message":{"type":"string","example":"Task successfully created!"},
                "data":{"$ref":"#/components/schemas/task"}
              }
            }
          }
        }
      },
      "400":{"description":"Bad request. Validation failed."},
      "401":{"description":"Unauthorized"}
    }
  }
},
"/api/tasks/{taskId}": {
  "patch": {
    "tags": ["Tasks"],
    "summary": "Update a task's completion status by ID",
    "operationId": "updateTaskStatus",
    "description": "Update the `isDone` status of a task. Only the owner of the task can update it.",
    "security":[{"bearerAuth":[]}],
    "parameters":[
      {
        "in":"path",
        "name":"taskId",
        "required":true,
        "schema":{"type":"string","pattern":"^[a-fA-F0-9]{24}$"},
        "description":"The MongoDB ObjectId of the task"
      }
    ],
    "requestBody":{
      "required":true,
      "content":{
        "application/json":{
          "schema":{
            "type":"object",
            "required":["isDone"],
            "properties":{
              "isDone":{"type":"boolean","example":true}
            }
          }
        }
      }
    },
    "responses":{
      "200":{
        "description":"Task status successfully updated",
        "content":{
          "application/json":{
            "schema":{
              "type":"object",
              "required":["status","message","data"],
              "properties":{
                "status":{"type":"integer","example":200},
                "message":{"type":"string","example":"Task status successfully updated!"},
                "data":{"$ref":"#/components/schemas/task"}
              }
            }
          }
        }
      },
      "400":{"description":"Bad request. Validation failed."},
      "401":{"description":"Unauthorized"},
      "404":{"description":"Task not found or no permission to update"}
    }
  }
}

  },
 "components": {
  "schemas": {
    "task": {
      "type": "object",
      "required":["_id","title","description","owner","isDone","createdAt","updatedAt"],
      "properties":{
        "_id":{"type":"string","pattern":"^[a-fA-F0-9]{24}$","example":"64fa3b2f8f8c2d0012345678"},
        "title":{"type":"string","minLength":1,"maxLength":64,"example":"Finish API documentation"},
        "description":{"type":"string","minLength":1,"maxLength":1000,"example":"Write Swagger docs for tasks API"},
        "owner":{"type":"string","pattern":"^[a-fA-F0-9]{24}$","example":"64fa3b2f8f8c2d0012345678"},
        "isDone":{"type":"boolean","example":false},
        "dueDate":{"type":"string","format":"date","example":"2025-09-25"},
        "createdAt":{"type":"string","format":"date-time","example":"2025-09-18T12:34:56.789Z"},
        "updatedAt":{"type":"string","format":"date-time","example":"2025-09-19T15:00:00.000Z"}
      }
    }
  },
  "securitySchemes":{
    "bearerAuth":{"type":"http","scheme":"bearer","bearerFormat":"JWT"}
  }
}
}
